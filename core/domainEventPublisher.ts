// Generated by Gemini
export interface DomainEvent {
    name: string;
}

export interface DomainEventHandler<T extends DomainEvent> {
    handle(event: T): void;
}

export class DomainEventPublisher {
    private static _instance: DomainEventPublisher;
    private handlers: { [eventName: string]: DomainEventHandler<DomainEvent>[] } = {};

    static get instance(): DomainEventPublisher {
        if (!DomainEventPublisher._instance) {
            DomainEventPublisher._instance = new DomainEventPublisher();
        }
        return DomainEventPublisher._instance;
    }

    publish<T extends DomainEvent>(event: T): void {
        const eventName = event.name;
        const handlers = this.handlers[eventName] || [];
        handlers.forEach(handler => handler.handle(event));
    }

    subscribe<T extends DomainEvent>(eventName: string, handler: DomainEventHandler<T>): void {
        if (!this.handlers[eventName]) {
            this.handlers[eventName] = [];
        }
        this.handlers[eventName].push(handler as DomainEventHandler<DomainEvent>);
    }
}